[{"title":"设计模式之简单工厂模式","url":"/2019/10/18/设计模式/设计模式之简单工厂模式/","content":"\n### 面向对象\n**可维护**\n**可复用**\n**可扩展**\n**灵活性好**\n\n### 面向对象的好处\n\n1. 使用**封装、继承和多态**使程序耦合度降低。\n2. 用设计模式使程序更加**灵活、容易修改、并且易于复用**。\n\n###简单工厂模式\n\n#### 简单工厂模式的定义定\n\n简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。\n\n#### 模式结构\n\nProduct：**抽象产品角色**创建所有对象的父类，负责描述所有实例所有公共接口\nConcentrate：**具体产品角色**\n    创建目标，所有创建的对象都充当这个角色的某个具体实例\nFactory：**工厂角色**\n负责创建实现所有实例的内部逻辑\n\n\n![SimpleFactory](Images/SimpleFactory.jpg \"SimpleFactory\")\n\n#### 模式分析\n+ 将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使两者修改起来相对容易。\n+ 在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的配置文件中，修改参数时无须修改任何源代码。\n+ 简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。\n+ 简单工厂模式的要点在于：*当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。*\n\n#### 优缺点分析\n\n**优点**\n\n1. 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。\n2. 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。\n\n**缺点**\n\n1. 由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。\n2. 使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。\n3. 系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。\n4. 简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。\n","tags":["设计模式"]},{"title":"MarkDown","url":"/2019/06/03/MarkDown/MarkDown/","content":"# MrakDown基本语法\n\n## 一、标题\n\n内容|符号\n-|-\n一级标题|#\n二级标题|##\n三级标题|###\n四级标题|####\n五级标题|#####\n六级标题|######\n\n## 二、字体\n\n内容|符号\n----|---\n加粗|**   **\n斜体|* *\n加粗斜体|*** ***\n删除线| ~~ ~~\n\n示例\n>**加粗**\n>*斜体*\n>***加粗斜体***\n>~~删除线文字~~\n\n## 三、引用\n\n引用用>\n\n## 四、分割线\n\n分割线用三个或三个以上的-( * )\n\n## 五、图片\n\n图片| ![图片alt] (图片地址 “图片title”)\n---|---\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是文字的标题，当鼠标移动到图片上时显示的内同，title可加可不加。\n\n**示例**\n![示例图片](https://images.pexels.com/photos/159866/books-book-pages-read-literature-159866.jpeg?auto=compress&cs=tinysrgb&h=650&w=940 \"这是一本书\")\n\n\n## 六、超链接\n\n超链接|[超链接名] (超链接地址 \"超链接title\")\n-----|------\ntitle可加可不加\n\n**示例**\n[百度](https://www.baidu.com/)\n\n## 七、列表\n\n无序列表| -/+/*\n-------|------\n\n有序列表| 数字加点\n-------|--------\n\n## 八、表格\n\n表头 | 表头 | 表头\n\n-----|-----|-----  \n\n内容 | 内容 | 内容\n\n文字默认居左\n\"-\"两边加\":\" 文字居中\n\"-\"右边加\":\" 文字居右\n\n## 九、代码\n\n单行代码：两个反引号括起来的 `\n多行代码：三个反引号括起来的 ‘’‘ （引号单独占一行）\n\n**示例**\n\n`代码内容`\n\n```\n  void fun()\n  {\n    这是一段贼厉害的代码\n  }\n"}]